<DEFINE trigger>
#define NULL = ""
#define LF  $string("&#0010;")
</DEFINE trigger>


;//-------------------------------------------------------------------------------
;// Unit tests
;// Test the creation of a SHA256 of Canonocal Request using AWS Signature v4
;//-------------------------------------------------------------------------------
entry EN100_TEST_HASH_OF_CAN_RQUEST
returns string
variables
    string P_VERB
    string P_URL
    string P_HOST
    string P_HEADERS
    string P_PAYLOAD
    string V_EXPECTED
    string V_ACTUAL
    string V_MESSAGE
    numeric V_STATUS
endvariables

    P_VERB = "GET"
    P_URL = "https://iam.amazonaws.com/?Action=ListUsers&Version=2010-05-08"
    P_HOST = "iam.amazonaws.com"
    putitem P_HEADERS, -1, "Content-Type: application/x-www-form-urlencoded; charset=utf-8"
    putitem P_HEADERS, -1, "X-Amz-Date: 20150830T123600Z"
    putitem P_HEADERS, -1, "Host: %%P_HOST"
    ;V_AMZ_DATE = EN300_AMZ_DATE() - for date

    P_PAYLOAD = "" 
    
    V_EXPECTED = $expected
    V_ACTUAL = EN100_CREATE_CANONICAL_SIG_V4( P_VERB, P_URL, P_HOST, P_HEADERS, P_PAYLOAD, V_MESSAGE, V_STATUS)

    if (V_EXPECTED = V_ACTUAL)
        return "PASS"
    else
        return "FAIL"
    endif
        
expected:blockdata ~
f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59~
end

;//---------------------------------------------------------------
;// Create a Canonical Request for Signature Version 4
;// http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
;//---------------------------------------------------------------
entry EN100_CREATE_CANONICAL_SIG_V4
returns string
    params
        string P_VERB : IN
        string P_URL : IN
        string P_HOST : IN
        string P_HEADERS : IN ; uniface list
        string P_PAYLOAD : IN
        string P_MESSAGE : OUT
        numeric P_STATUS : OUT
    endparams
    variables
        string V_HTTP_REQUEST_METHOD
        string V_CANONICAL_URI
        string V_CANONICAL_QUERY_STRING
        string V_CANONICAL_HEADERS
        string V_SIGNED_HEADERS
        string V_REQUEST_PAYLOAD
        string V_QUERY_STRING
        string V_URI_PARAMS
        string V_URI
        string V_AMZ_DATE
        string V_HASH
        string V_HEX_CODE
        string V_OUTPUT
        string V_CANONICAL_REQUEST
        string V_MESSAGE
        numeric V_STATUS
    endvariables

;Guards
    if (P_VERB = "")
        P_STATUS = -1
        P_MESSAGE = "No HTTP verb"
        return <NULL>
    endif 
    if (P_URL = "")
        P_STATUS = -1
        P_MESSAGE = "No API URL"
        return <NULL>
    endif 

;Init

;Process

    ;HTTP method
    V_HTTP_REQUEST_METHOD = P_VERB

    ;CanonicalURI : everything in URI (encoded) from host to the ? see RFC3986
    V_URI = P_URL
    V_URI = $replace(V_URI, 1, "://", "·;", 1)
    V_URI = $replace(V_URI, 1, "/", "·;", 1)
    V_URI = $replace(V_URI, 1, "?", "·;", 1)
 
    V_URI_PARAMS = $itemnr(3, V_URI)
    if (V_URI_PARAMS = <NULL>)
        V_URI_PARAMS = "/"
    endif
    V_CANONICAL_URI = V_URI_PARAMS

    ;Canonical query string
    if ($itemcount(V_URI) > 3) 
        V_QUERY_STRING = $itemnr(4,V_URI)
        V_CANONICAL_QUERY_STRING = EN200_CANONICAL_QUERY_STRING( V_QUERY_STRING, V_MESSAGE, V_STATUS )
        V_CANONICAL_QUERY_STRING = V_CANONICAL_QUERY_STRING
    else
        V_CANONICAL_QUERY_STRING = ""
    endif

    ;Canonical Headers : List of all HTTP headers. host header at a minimum. others opt
    V_CANONICAL_HEADERS = EN300_CANONICAL_HEADERS(P_HEADERS, V_MESSAGE, V_STATUS)

    ;SignedHeaders 
    V_SIGNED_HEADERS = EN400_SIGNED_HEADERS(P_HEADERS, V_MESSAGE, V_STATUS)

    ;create the hex code : use same alogrthim for AWS i.e. AWS4-HMAC-SHA256
    V_REQUEST_PAYLOAD = P_PAYLOAD
    if (V_REQUEST_PAYLOAD = "")
        V_HEX_CODE = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    else
        V_HASH = $encode("SHA256", V_REQUEST_PAYLOAD)
        V_HEX_CODE = $encode("HEX", V_HASH)
        V_HEX_CODE = $lowercase(V_HEX_CODE)
    endif

    ;combine
    V_CANONICAL_REQUEST = $concat(V_HTTP_REQUEST_METHOD, <LF>, V_CANONICAL_URI, <LF>, V_CANONICAL_QUERY_STRING)
    V_CANONICAL_REQUEST = $concat(V_CANONICAL_REQUEST, <LF>, V_CANONICAL_HEADERS, <LF>, V_SIGNED_HEADERS)
    V_CANONICAL_REQUEST = $concat(V_CANONICAL_REQUEST, V_HEX_CODE)
    V_OUTPUT = $lowercase( $encode("HEX", $encode("SHA256", V_CANONICAL_REQUEST)) )

    ;Return
    return V_OUTPUT

end

;//---------------------------------------------------
;// Canonical Query string
;//---------------------------------------------------
entry EN200_CANONICAL_QUERY_STRING
returns string
    params
        string P_QUERY_STRING : IN
        string P_MESSAGE : OUT
        numeric P_STATUS : OUT
    endparams
    variables
        string V_LIST
        string V_QUERY_STRING
        string V_ITEM
        string V_CANONICAL_QUERY_STRING
        numeric V_IDX
    endvariables

    ;extract parameters
    V_QUERY_STRING = P_QUERY_STRING
    V_QUERY_STRING = $replace(V_QUERY_STRING, 1, "&", "·;", -1)
    while (V_QUERY_STRING != <NULL>)
        putitem V_LIST, -1, $itemnr(1, V_QUERY_STRING)
        delitem V_QUERY_STRING, 1
    endwhile

    ;a.sort
    sort/list (V_LIST, "$idpart: ascending string")

    ;b.URI-encode  
    ;// todo

    V_CANONICAL_QUERY_STRING = <NULL>
    forlist V_ITEM, V_IDX in V_LIST
        ;c.build canonical query string
         V_CANONICAL_QUERY_STRING = $concat(V_CANONICAL_QUERY_STRING,V_ITEM)

        ;d.append '&' except ofr last
        if (V_IDX != $itemcount(V_LIST))
            V_CANONICAL_QUERY_STRING = $concat(V_CANONICAL_QUERY_STRING, "&")
        endif     
    endfor

    return V_CANONICAL_QUERY_STRING
end

;//---------------------------------------------------
;// Canonical Headers
;//---------------------------------------------------
entry EN300_CANONICAL_HEADERS
returns string
    params
        string P_HEADERS : IN
        string P_MESSAGE : OUT
        numeric P_STATUS : OUT
    endparams
    variables
        string V_ITEM
        string V_LIST
        numeric V_IDX
        string V_HDR_NAME
        string V_HDR_VALUE 
        numeric V_POS
    endvariables

    if (P_HEADERS = <NULL>) return <NULL>
;"Content-Type: application/x-www-form-urlencoded; charset=utf-8"
    forlist V_ITEM, V_IDX in P_HEADERS
        if ($scan(V_ITEM,":") > 0)
            V_POS = $split(V_ITEM, 1, ":", V_HDR_NAME, V_HDR_VALUE)
        endif

        V_HDR_NAME = $ltrim($rtrim( $lowercase(V_HDR_NAME)," " )," ")
        V_HDR_VALUE = $ltrim($rtrim( V_HDR_VALUE," " )," ")

        ;replace header value white space with single space
        while ($scan(V_HDR_VALUE,"  ") > 1)
            V_HDR_VALUE = $replace(V_HDR_VALUE,1,"  "," ",-1)
        endwhile

        putitem V_LIST, -1, $concat(V_HDR_NAME, ":", V_HDR_VALUE, <LF>)
    endfor

    ;a.sort
    sort/list (V_LIST, "$idpart: ascending string")
    V_LIST = $replace(V_LIST,1,"·;","",-1)

    return V_LIST
end

;//---------------------------------------------------
;// Signed Headers : must have host and x-amz-date, semi-colon-separated
;//---------------------------------------------------
entry EN400_SIGNED_HEADERS
returns string
    params
        string P_HEADERS : IN
        string P_MESSAGE : OUT
        numeric P_STATUS : OUT
    endparams
    variables
        string V_ITEM
        string V_LIST
        numeric V_IDX
        string V_HDR_NAME
        string V_HDR_VALUE 
        numeric V_POS
    endvariables

    if (P_HEADERS = <NULL>) return <NULL>

    forlist V_ITEM, V_IDX in P_HEADERS
        if ($scan(V_ITEM,":") > 0)
            V_POS = $split(V_ITEM, 1, ":", V_HDR_NAME, V_HDR_VALUE)
        endif

        V_HDR_NAME = $ltrim($rtrim( $lowercase(V_HDR_NAME)," " )," ")

        putitem V_LIST, -1, V_HDR_NAME
    endfor

    ;a.sort and separate with semi-colon
    sort/list (V_LIST, "$idpart: ascending string")
    V_LIST = $replace(V_LIST,1,"·;",";",-1)
    V_LIST = $concat(V_LIST,<LF>)

    return V_LIST
end

;//---------------------------------------------------------------------
;// Create the string to sign
;//---------------------------------------------------------------------
entry EN500_CREATE_STRING_TO_SIGN
returns string
    params  
        string P_AMZ_DATE : IN
        string P_DATE_YYYYMMDD : IN
        string P_REGION : IN
        string P_HASH_OF_CANONICAL_REQ : IN
    endparams
    variables
        string V_ALGORITHM
        string V_AMZ_DATE
        string V_REGION
        string V_AWS_SERVICE
        string V_TERMINATOR
        string V_CREDENTIAL_SCOPE
        string V_STRING_TO_SIGN
        string V_HASH_OF_CANONICAL_REQ
    endvariables

;// Guards 

;// init
    V_AWS_SERVICE = "iam"
    V_TERMINATOR = "aws4_request"

    if (P_REGION = <NULL>)
        V_REGION = "ap-southeast-2"
    else
        V_REGION = P_REGION
    endif
    V_HASH_OF_CANONICAL_REQ = P_HASH_OF_CANONICAL_REQ

;// Process

    ;// SHA256
    V_ALGORITHM = "AWS4-HMAC-SHA256"

    ;// Request date value : ISO8601
    ;V_AMZ_DATE = EN300_AMZ_DATE() 

    ;// Append credential scope value
    ;// - lowercase(date/region/service/"aws4_request")
    V_CREDENTIAL_SCOPE = $concat(P_DATE_YYYYMMDD,"/",P_REGION,"/",V_AWS_SERVICE)
    V_CREDENTIAL_SCOPE = $concat(V_CREDENTIAL_SCOPE,"/",V_TERMINATOR)
    V_CREDENTIAL_SCOPE = $lowercase(V_CREDENTIAL_SCOPE)

    ;// Append Hash of canonical request
    V_STRING_TO_SIGN = $concat(V_ALGORITHM, <LF>, P_AMZ_DATE, <LF>, V_CREDENTIAL_SCOPE)
    V_STRING_TO_SIGN = $concat(V_STRING_TO_SIGN, <LF>, P_HASH_OF_CANONICAL_REQ)

    return V_STRING_TO_SIGN

end


;//---------------------------------------------------------------------
;// Calculate the Signature for AWS Signature Version 4
;//   kSecret = your secret access key
;//   kDate = HMAC("AWS4" + kSecret, Date)
;//   kRegion = HMAC(kDate, Region)
;//   kService = HMAC(kRegion, Service)
;//   kSigning = HMAC(kService, "aws4_request")
;//---------------------------------------------------------------------
entry EN600_CALCULATE_SIGNATURE_AWSV4
returns string
    params  
        string P_STRING_TO_SIGN : IN
        string P_SECRET_ACCESS_KEY : IN
        string P_DATE_YYYYMMDD : IN
        string P_REGION : IN
        string P_SERVICE : IN
    endparams
    variables
        string V_KSECRET
        raw V_KDATE
        raw V_KREGION
        raw V_KSERVICE
        raw V_KSIGNING
        string V_SIGNATURE
        string v_test
    endvariables

;// Guards 

;// init

;// Process
debug
;change to key then data 
    ;// Derive signing key : Run a series of Hashes
    V_KSECRET = P_SECRET_ACCESS_KEY
    V_KDATE = $encode("HMAC_SHA256", P_DATE_YYYYMMDD, $concat("AWS4", V_KSECRET))
    V_KREGION = $encode("HMAC_SHA256", P_REGION, V_KDATE)
    V_KSERVICE = $encode("HMAC_SHA256", P_SERVICE, V_KREGION)
    V_KSIGNING = $encode("HMAC_SHA256", "aws4_request", V_KSERVICE)
    V_TEST = $lowercase($encode("HEX", V_KSIGNING))


    ;// Calculate signature
    V_SIGNATURE = $lowercase( $encode("HEX", $encode("HMAC_SHA256", P_STRING_TO_SIGN, V_KSIGNING )))


;;;    V_KDATE = $lowercase( $encode("HEX", $encode("HMAC_SHA256", $concat("AWS4", V_KSECRET), P_DATE_YYYYMMDD) ) )
;;;    V_KREGION = $lowercase( $encode( "HEX", $encode("HMAC_SHA256", V_KDATE, P_REGION) ) )
;;;    V_KSERVICE = $lowercase( $encode( "HEX", $encode("HMAC_SHA256", V_KREGION, P_SERVICE) ) )
;;;    V_KSIGNING = $lowercase( $encode("HEX", $encode("HMAC_SHA256", V_KSERVICE, "aws4_request")) )
;;;
;;;    ;// Calculate signature
;;;    V_SIGNATURE = $lowercase( $encode("HEX", $encode("HMAC_SHA256", V_KSIGNING, P_STRING_TO_SIGN)))
    return V_SIGNATURE
end


;//---------------------------------------------------
;// AWS Date
;//---------------------------------------------------
entry EN900_AMZ_DATE
returns string
    variables
        datetime V_NOW
        string V_AWS_DATE
        numeric Vx
    endvariables

    V_NOW = $datim

    ;year
    V_AWS_DATE = V_NOW[Y]

    ;month
    Vx = V_NOW[M]
    if (Vx < 10)
        V_AWS_DATE = $concat(V_AWS_DATE, "0", Vx)
    else
        V_AWS_DATE = $concat(V_AWS_DATE, Vx)
    endif

    ;day
    Vx = V_NOW[D]
    if (Vx < 10)
        V_AWS_DATE = $concat(V_AWS_DATE, "0", Vx)
    else
        V_AWS_DATE = $concat(V_AWS_DATE, Vx)
    endif

    V_AWS_DATE = $concat(V_AWS_DATE, "T")

    ;Hour
    Vx = V_NOW[H]
    if (Vx < 10)
        V_AWS_DATE = $concat(V_AWS_DATE, "0", Vx)
    else
        V_AWS_DATE = $concat(V_AWS_DATE, Vx)
    endif

    ;Mins
    Vx = V_NOW[N]
    if (Vx < 10)
        V_AWS_DATE = $concat(V_AWS_DATE, "0", Vx)
    else
        V_AWS_DATE = $concat(V_AWS_DATE, Vx)
    endif

    ;Secs
    Vx = V_NOW[S]
    if (Vx < 10)
        V_AWS_DATE = $concat(V_AWS_DATE, "0", Vx)
    else
        V_AWS_DATE = $concat(V_AWS_DATE, Vx)
    endif

    V_AWS_DATE = $concat(V_AWS_DATE, "Z")

    return V_AWS_DATE
end

